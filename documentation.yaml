openapi: "3.0.0"
info:
  version: 1.0.0
  description: "Cette API permet de gérer des colocations en fonction des tâches à réaliser par chacun des membres."
  title: "Colocation API"
  contact:
    email: "lea.banquart@uha.fr"
  license:
    name: "Banquart Léa et Tosan Albéric"
    
servers:
  - url: "http://localhost:8080/"
  
components:
  securitySchemes:
     BearerAuth:
      type: http
      scheme: bearer

paths:
  /auth/login:
    post:
      tags:
      - "Authentification"
      summary: "S'authentifier"
      operationId: "login"
      parameters:
        - name: "email"
          in: "query"
          description: "Email du colocataire"
          required: true
          allowReserved: true
          schema:
            type: "string"
        - name: "password"
          in: "query"
          description: "Mot de passe du colocataire"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
          '200':
            description: "Retourne le token"
            
  /auth/logout:
    post:
      security:
        - bearerAuth: []
      tags:
      - "Authentification"
      summary: "Se déconnecter"
      operationId: "logout"
      parameters:
        - name: "token"
          in: "query"
          description: "Token de la connexion"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
          '200':
            description: "Retourne le token" 
        
  /colocations/add:
    post:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Ajouter une nouvelle colocation"
      description: ""
      operationId: "addColocation"
      responses:
        '200':
          description: "Retourne l'ID de la colocation" 
  /colocations/addUser:
    post:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Ajouter un nouveau habitant dans la colocation"
      description: ""
      operationId: "addOneUserInColocation"
      parameters:
        - name: "id"
          in: "query"
          description: "ID de la colocation"
          required: true
          allowReserved: true
          schema:
            type: "integer"
        - name: "userEmail"
          in: "query"
          description: "Email de l'habitant à ajouter"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Retourne la colocation"          
        '404':
          description: "L'utilisateur ou la colocation est introuvable, ou il existe déjà cet utilisateur dans la colocation."
  /colocations/removeUser:
    delete:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Supprimer un nouveau habitant dans la colocation"
      description: ""
      operationId: "removeOneUserInColocation"
      parameters:
        - name: "id"
          in: "query"
          description: "ID de la colocation"
          required: true
          allowReserved: true
          schema:
            type: "integer"
        - name: "userEmail"
          in: "query"
          description: "Email de l'habitant à supprimer"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Retourne la colocation"
        '404':
          description: "L'utilisateur ou la colocation est introuvable, ou il existe déjà cet utilisateur dans la colocation."
  /colocations/addTask:
    post:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Ajouter une nouvelle tâche à la colocation"
      description: ""
      operationId: "addOneTaskInColocation"
      parameters:
        - name: "id"
          in: "query"
          description: "ID de la colocation"
          required: true
          allowReserved: true
          schema:
            type: "integer"
        - name: "description"
          in: "query"
          description: "Description de la tâche"
          required: true
          allowReserved: true
          schema:
            type: "string"
        - name: "points"
          in: "query"
          description: "Nombre de points de la tâche"
          required: true
          allowReserved: true
          schema:
            type: "integer"
        - name: "askerEmail"
          in: "query"
          description: "Email du demandeur de la tâche"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Retourne la colocation"          
        '404':
          description: "L'utilisateur ou la colocation est introuvable, ou il existe déjà cet utilisateur dans la colocation."
  /colocations/taskDone:
    post:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Met une tâche 'faite'"
      description: ""
      operationId: "setOneTaskDoneInColocation"
      parameters:
        - name: "id"
          in: "query"
          description: "ID de la colocation"
          required: true
          allowReserved: true
          schema:
            type: "integer"
        - name: "taskId"
          in: "query"
          description: "ID de la tâche à modifier"
          required: true
          allowReserved: true
          schema:
            type: "integer"
        - name: "donerEmail"
          in: "query"
          description: "Email de la personne ayant fait la tâche"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Retourne 'successful operation'"
        '404':
          description: "L'utilisateur ou la colocation est introuvable, ou il existe déjà cet utilisateur dans la colocation."
  /colocations/delete:
    delete:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Supprimer une colocation"
      description: ""
      operationId: "deleteColocation"
      parameters:
        - name: "ID"
          in: "query"
          description: "ID de la colocation à supprimer"
          required: true
          allowReserved: true
          schema:
            type: "integer"
      responses:
        '200':
          description : "Retourne la colocation supprimée"
        '404':
          description: "La colocation est introuvable."
  /colocations/all:
    get:
      security:
        - bearerAuth: []
      tags:
      - "Colocations"
      summary: "Récupérer toutes les colocations"
      description: ""
      operationId: "getAllColocations"
      responses:
        '200':
          description: "Liste de toutes les colocations"
          
  /users/add:
    post:
      security:
        - bearerAuth: []
      tags:
      - "Users"
      summary: "Ajouter un utilisateur"
      description: ""
      operationId: "addUser"
      parameters:
        - name: "email"
          in: "query"
          description: "email de l'utilisateur"
          required: true
          allowReserved: true
          schema:
            type : "string"
        - name: "password"
          in: "query"
          description: "mot de passe de l'utilisateur"
          required: true
          allowReserved: true
          schema:
            type : "string"
        - name: "points"
          in: "query"
          description: "Points de l'utilisateur"
          required: true
          allowReserved: true
          schema:
            type : "integer"
      responses:
        '200':
          description: "Retourne le mail de l'utilisateur'"
  /users/delete:
    delete:
      security:
        - bearerAuth: []
      tags:
      - "Users"
      summary: "Supprimer un utilisateur"
      description: ""
      operationId: "deleteUser"
      parameters:
        - name: "email"
          in: "query"
          description: "email de l'utilisateur à supprimer"
          required: true
          allowReserved: true
          schema:
            type: "string"
      responses:
        '200':
          description: "Retourne 'Deleted'"
        '404':
          description: "L'utilisateur est introuvable."
  /users/all:
    get:
      security:
        - bearerAuth: []
      tags:
      - "Users"
      summary: "Récupérer tous les utilisateurs"
      description: ""
      operationId: "getAllUsers"
      responses:
        '200':
          description: "Retourne la liste de tous les utilisateurs"
  
  /tasks/delete:
    delete:
      security:
        - bearerAuth: []
      tags:
      - "Tasks"
      summary: "Supprimer une tâche"
      description: ""
      operationId: "deleteTask"
      parameters:
        - name: "id"
          in: "query"
          description: "ID de la tâche à supprimer"
          required: true
          allowReserved: true
          schema:
            type: "integer"
      responses:
        '200':
          description: "Retourne 'Deleted'"
        '404':
          description: "La tâche est introuvable."
  /tasks/all:
    get:
      security:
        - bearerAuth: []
      tags:
      - "Tasks"
      summary: "Récupérer toutes les tâches"
      description: ""
      operationId: "getAllTasks"
      responses:
        '200':
          description: "La liste de toutes les tâches"
    
  

  
  
